{
  "time": 1698941204210,
  "blocks": [
    {
      "id": "vsb42ikcae",
      "type": "header",
      "data": {
        "text": "Introduction",
        "level": 2
      }
    },
    {
      "id": "bvc7fpl7wn",
      "type": "code",
      "data": {
        "code": "pip install pyquickconfig"
      }
    },
    {
      "id": "edbyrfrz45",
      "type": "paragraph",
      "data": {
        "text": "QuickConfig Repo: https://github.com/austinibele/quickconfig"
      }
    },
    {
      "id": "qh616lcwf",
      "type": "paragraph",
      "data": {
        "text": "Managing configurations is fundamental in machine learning, where numerous parameters need to be tuned and controlled. I discovered this as a Senior Machine Learning Engineer at a Austin, TX consultancy, and this has stayed true throughout my experience founding My-Visa-USA, an AI-first start-up that aims to lower the financial barriers to U.S. Visa and Immigration. It’s also stayed true through various ML software projects we’ve completed at Avance.ai."
      }
    },
    {
      "id": "g69ng7g4lz",
      "type": "paragraph",
      "data": {
        "text": "Two popular libraries for handling these configurations are ArgParse and Hydra. As we embarked on our quest to find the most suitable config management library at our company, we had a clear set of criteria in mind. We sought a library that would fulfill the following eight requirements:"
      }
    },
    {
      "id": "6cvyqykmk3",
      "type": "list",
      "data": {
        "style": "ordered",
        "items": [
          "Arguments and their defaults must be first defined in the code",
          "The flexibility for default arguments to be overridden via file-based configurations (.json) or directly in the command-line.",
          "Type validation.",
          "Value validation.",
          "Immutability",
          "Specific help messages for each argument.",
          "An exact copy of the configuration used for the run is automatically saved to a save directory specific for that run.",
          "The save directory must be determined by the Config library and set as an attribute of the Config object, so that we can easily access the save directory to save model weights, validation metrics, and so forth in a single centralized location (along with the exact copy of the config, which is saved when the config is built)."
        ]
      }
    },
    {
      "id": "f3xoxewhy4",
      "type": "paragraph",
      "data": {
        "text": "Unfortunately, neither ArgParse nor Hydra seemed to fully satisfy these requirements. I was also concerned that Hydra’s complexity might pose a barrier to its adoption. Thus we set off to create our own config library. One library that came out of that effort was QuickConfig, a library I personally designed and have used with success."
      }
    },
    {
      "id": "6k1k42mzyy",
      "type": "header",
      "data": {
        "text": "Comparison with ArgParse and Hydra",
        "level": 2
      }
    },
    {
      "id": "u66579cb6e",
      "type": "paragraph",
      "data": {
        "text": "Here are some more details on QuickConfig, and how it compares to ArgParse and Hydra…"
      }
    },
    {
      "id": "ytfxekhl6c",
      "type": "paragraph",
      "data": {
        "text": "Like ArgParse, QuickConfig allows users to define arguments and their default values in code, but like Hydra, it extends this functionality by permitting these defaults to be overridden by file-based configurations and/or at the command-line (both options which are not available in ArgParse). An added layer of safety is achieved by QuickConfig’s insistence that users define all arguments in the code before an argument can be supplied in a file or the command line."
      }
    },
    {
      "id": "t94szektap",
      "type": "paragraph",
      "data": {
        "text": "Below: An example of overriding defaults with values in config.json, and overriding the “lr” argument of the training sub-config through the command-line."
      }
    },
    {
      "id": "7isj8n3s8m",
      "type": "code",
      "data": {
        "code": "python -m src.main config=config.json training.lr=1e-4"
      }
    },
    {
      "id": "7p3972i9dz",
      "type": "paragraph",
      "data": {
        "text": "Below: Defining subconfigs, arguments, and their defaults."
      }
    },
    {
      "id": "rjt8b5ktl9",
      "type": "code",
      "data": {
        "code": "from quickconfig.main_base import MainBase\nfrom quickconfig.base_config import BaseConfig\n\nclass MainConfig(MainBase):    \n  def __init__(self):        \n    super().__init__(prog=\"train.sh\", description=\"Train a model\")        \n    self.model = ModelConfig        \n    self.training = TrainingConfig\n\nclass ModelConfig(BaseConfig):    \n  def __init__(self):        \n    super().__init__()        \n    self.add_argument(            \n      name=\"model_type\",            \n      type=str,            \n      default=\"retinanet\",            \n      help=\"The type of model to use\",            \n      validation=lambda x: x in [\"retinanet\", \"patch\"],       \n      )\n\nclass TrainingConfig(BaseConfig):    \n  def __init__(self):        \n    super().__init__()        \n    self.add_argument(             \n      name=\"use_mlflow_logger\",            \n      type=bool,            \n      default=False,            \n      help=\"Should we log with mlflow?\",            \n      validation=None,        \n      )        \n    self.add_argument(            \n      name=\"lr\",            \n      type=float,            \n      default=1e-3,            \n      help=\"This is a mock integer arg\",            \n      validation=lambda x: x >= 1e-9 and x <= 1e-2,        \n      )"
      }
    },
    {
      "id": "fbls7t365k",
      "type": "paragraph",
      "data": {
        "text": "Below: Using QuickConfig with your module."
      }
    },
    {
      "id": "z97aanqi5y",
      "type": "code",
      "data": {
        "code": "from src.training.main_config import MainConfig\n\nclass MySession:\n...\n...\n\nif __name__ == \"__main__\":    \n  config = MainConfig()    \n  config.build()    \n\n  session = MySession(config)    \n  session.run()"
      }
    },
    {
      "id": "hd4h5ay1vg",
      "type": "paragraph",
      "data": {
        "text": "QuickConfig sets itself apart from Hydra with its easy to use type and value validation. Utilizing lambda functions, QuickConfig performs value validation, offering a level of control and verification that guards against runtime errors. Hydra, while being a powerful tool, does not offer a straightforward way to specify data type and validation without resorting to creating data-class configurations — a process that can be cumbersome in Hydra. QuickConfig makes type and value validation a breeze."
      }
    },
    {
      "id": "pnrxcp5wce",
      "type": "paragraph",
      "data": {
        "text": "Below: Defining arguments and their defaults in code with QuickConfig."
      }
    },
    {
      "id": "adxkowid3q",
      "type": "code",
      "data": {
        "code": "self.add_argument(    \n    name=\"lr\",    \n    type=float,    \n    default=1e-3,    \n    help=\"This is a mock integer arg\",    \n    validation=lambda x: x >= 1e-9 and x <= 1e-2\n)"
      }
    },
    {
      "id": "au057wjany",
      "type": "paragraph",
      "data": {
        "text": "The way QuickConfig organizes argument access makes it an appealing choice. Arguments are handled as attributes, allowing for a structured access like 'config.model_architecture.num_conv_layers'. In this case, model_architecture is a sub-config of the main config, and num_conv_layers is a argument of the model_architecture sub-config. This design ensures the code remains neat, readable, and easy to maintain. Adding to its reliability, QuickConfig makes configurations immutable once they are created, preventing accidental modifications later in the code. (Note that QuickConfig, like Hydra, only permits one level of nesting in the config. i.e. cub-configs cannot have their own sub-configs)."
      }
    },
    {
      "id": "oth4cy9m1f",
      "type": "paragraph",
      "data": {
        "text": "While QuickConfig holds several advantages, Hydra is more featured. One great Hydra feature is the ability to execute multiple training runs with different argument values from a single command-line command. In Hydra, different training runs can be initiated by simply separating parameter values with a comma, like “lr=1e-5,1e-4”. This mechanism expedites the process of training with different hyperparameters, thereby boosting efficiency in experimentation and tuning. With that being said, that functionality is next on my list to implement (And if anyone is interested in implementing that or additional features, I welcome contributors)."
      }
    },
    {
      "id": "bvhgzzd1uw",
      "type": "list",
      "data": {
        "style": "ordered",
        "items": [
          "— help” or “- — h” with the command-line."
        ]
      }
    },
    {
      "id": "74jgk651p7",
      "type": "image",
      "data": {
        "file": {
          "url": "https://miro.medium.com/v2/resize:fit:700/1*51fBveR5dnD0iIJEOHGbnw.png"
        },
        "caption": "An example of a QuickConfig help message.",
        "withBorder": false,
        "stretched": false,
        "withBackground": false
      }
    },
    {
      "id": "bcw04kgyil",
      "type": "paragraph",
      "data": {
        "text": "<An example of a QuickConfig help message."
      }
    },
    {
      "id": "ink9f7wwyr",
      "type": "paragraph",
      "data": {
        "text": "Hydra’s handling of configuration save directories also has its challenges. Unless a datetime is added to the save directory, the directory risks being overridden each time, potentially resulting in data loss. While using Hydra’s functionality to create unique save directories using datetime can circumvent this problem, naming folders wiht long datetime strings is not as intuitive as QuickConfig’s method of sequentially naming the folders for easy reference."
      }
    },
    {
      "id": "3oarjo4cp8",
      "type": "image",
      "data": {
        "file": {
          "url": "https://miro.medium.com/v2/resize:fit:187/1*2S28TQWswIXB047-86Jc4A.png"
        },
        "caption": "By default, QuickConfig creates a new folder in the “results” directory for each day. Each run on that day results in the creation of a folder (with an integer name). The folder named “N” corresponds to the Nth run of that day.",
        "withBorder": false,
        "stretched": false,
        "withBackground": false
      }
    },
    {
      "id": "dsm1b4z4lt",
      "type": "paragraph",
      "data": {
        "text": "<By default, QuickConfig creates a new folder in the “results” directory for each day. Each run on that day results in the creation of a folder (with an integer name). The folder named “N” corresponds to the Nth run of that day."
      }
    },
    {
      "id": "7wfe7ez93u",
      "type": "header",
      "data": {
        "text": "Final Thoughts",
        "level": 2
      }
    },
    {
      "id": "ejb0kuny8c",
      "type": "paragraph",
      "data": {
        "text": "In conclusion, QuickConfig is a simple, robust and user-friendly alternative to ArgParse and Hydra. Its ability to override defaults on the fly from a file-based config or the command-line, coupled with its type and value validation, make QuickConfig not just extremely easy to use, but dependable as well. Its attribute-like argument access and immutable configurations help improve reliability and readability of your code. While it does miss out on some features, such as Hydra’s ability to initiate multiple training runs with different parameters specified from the command-line, QuickConfig is easier to use than Hydra, offers better help messages, better type and value validation, and saves experiments in more intuitively named directories."
      }
    },
    {
      "id": "4k243wqgkk",
      "type": "paragraph",
      "data": {
        "text": "So if you’re looking for an easy to use config library that has type and value validation, immutability, allows easy access of arguments in the code by making arguments attributes, automatically saves a copy of the configuration, and has the ability to configure specific help messages for each and every argument, look no further. Give QuickConfig a try and let me know what you think."
      }
    },
    {
      "id": "99dsbjp1dq",
      "type": "code",
      "data": {
        "code": "pip install pyquickconfig"
      }
    },
    {
      "id": "u09leb5hkc",
      "type": "paragraph",
      "data": {
        "text": "QuickConfig Repo: https://github.com/austinibele/quickconfig"
      }
    }
  ],
  "version": "2.28.2"
}